apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-base
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eshop-base
  template:
    metadata:
      labels:
        app: eshop-base
    spec:
      containers:
        - name: eshop-base
          image: h4mdi/eshop-base:latest
          imagePullPolicy: IfNotPresent

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.0.1
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
          ports:
            - containerPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  labels:
    app: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: broker
  name: broker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: broker
  strategy: {}
  template:
    metadata:
      labels:
        app: broker
    spec:
      containers:
        - env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
          image: confluentinc/cp-kafka:7.0.1
          name: broker
          ports:
            - containerPort: 9092
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: broker
  name: broker
spec:
  ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
  selector:
    app: broker
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: config
  name: config
spec:
  replicas: 1
  selector:
    matchLabels:
      app: config
  strategy: {}
  template:
    metadata:
      labels:
        app: config
    spec:
      containers:
        - env:
            - name: SPRING_PROFILES_ACTIVE
              value: docker,native
            - name: CONFIG_SERVICE_USER
              value: cfguser
            - name: CONFIG_SERVICE_PASSWORD
              value: cfgpassword
            - name: CONFIG_KEY_PASSWORD
              value: secure-keystore-password
            - name: EUREKA_USER
              value: user
            - name: POSTGRES_USER
              value: dbuser
          image: h4mdi/config-server:latest
          name: config
          ports:
            - containerPort: 8888
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: config
  name: config
spec:
  ports:
    - name: "8888"
      port: 8888
      targetPort: 8888
  selector:
    app: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: discovery-server
  name: discovery-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discovery-server
  strategy: {}
  template:
    metadata:
      labels:
        app: discovery-server
    spec:
      containers:
        - env:
            - name: SPRING_PROFILES_ACTIVE
              value: docker
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
          image: h4mdi/discovery:latest
          name: discovery-server
          ports:
            - containerPort: 8761
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: discovery-server
  name: discovery-server
spec:
  type: NodePort
  ports:
  - port: 8761
    targetPort: 8761
    nodePort: 31001
  selector:
    app: discovery-server
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gateway
  name: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  strategy: {}
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
        - env:
            - name: SPRING_PROFILES_ACTIVE
              value: docker
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
          image: h4mdi/gateway:latest
          name: api-gateway
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always

status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: api-gateway
  name: api-gateway
spec:
  type: LoadBalancer
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    app: gateway
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - image: mongo:5.0.5
          name: mongo
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "user"
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: "pass"
          resources: {}
          volumeMounts:
            - mountPath: /data/db
              name: mongo-claim0
      volumes:
        - name: mongo-claim0
          persistentVolumeClaim:
            claimName: mongo-claim0

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: mongo
  name: mongo
spec:
  ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
  selector:
    app: mongo
status:
  loadBalancer: {}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: mongo-claim0
  name: mongo-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: h4mdi/pg-shop
          ports:
            - containerPort: 5432
          env:
            - name: PGDATA
              value: /data/postgres
            - name: POSTGRES_PASSWORD
              value: dbpass
            - name: POSTGRES_USER
              value: dbuser
            - name: PGTZ
              value: Europe/Amsterdam
            - name: CATALOG_DB_USER
              value: catalogdbuser
            - name: CATALOG_DB_PASSWORD
              value: dbpass
            - name: CATALOG_DB_NAME
              value: catalogdb
            - name: RATING_DB_USER
              value: ratingdbuser
            - name: RATING_DB_NAME
              value: ratingdb
            - name: RATING_DB_PASSWORD
              value: dbpass
            - name: ORDER_DB_USER
              value: orderdbuser
            - name: ORDER_DB_PASSWORD
              value: dbpass
            - name: ORDER_DB_NAME
              value: orderdb
          readinessProbe:
            exec:
              command:
                - "pg_isready"
                - "-U"
                - "dbuser"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - "pg_isready"
                - "-U"
                - "dbuser"
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources: {}
          volumeMounts:
            - mountPath: /data/postgres
              name: postgres-order-claim0
      restartPolicy: Always
      volumes:
        - name: postgres-order-claim0
          persistentVolumeClaim:
            claimName: postgres-order-claim0
    
---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    app: postgres
status:
  loadBalancer: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: postgres-order-claim0
  name: postgres-order-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-command
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalog-command
  template:
    metadata:
      labels:
        app: catalog-command
    spec:
      containers:
        - name: catalog-command
          image: h4mdi/catalog-command:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "docker"
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
            - name: MONGO_USER
              value: "user"
            - name: MONGO_PASSWORD
              value: "pass"
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: catalog-command
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: 8080
  selector:
    app: catalog-command
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalog-query
spec:
  replicas: 1
  selector:
    matchLabels:
      app: catalog-query
  template:
    metadata:
      labels:
        app: catalog-query
    spec:
      containers:
        - name: catalog-query
          image: h4mdi/catalog-query:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "docker"
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
            - name: POSTGRES_USER
              value: "dbuser"
            - name: POSTGRES_PASSWORD
              value: "dbpass"  # Provide the correct password here
            - name: MONGO_USER
              value: "user"
            - name: MONGO_PASSWORD
              value: "pass"
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: catalog-query
spec:
  type: ClusterIP
  ports:
    - name: "8082"
      port: 8082
      targetPort: 8082
  selector:
    app: catalog-query
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-processing
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-processing
  template:
    metadata:
      labels:
        app: order-processing
    spec:
      containers:
        - name: order-processing
          image: h4mdi/order-processing:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "docker"
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
            - name: POSTGRES_USER
              value: "dbuser"
            - name: POSTGRES_PASSWORD
              value: "dbpass"  # Provide the correct password here
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: order-processing
spec:
  type: ClusterIP
  ports:
    - name: "8084"
      port: 8084
      targetPort: 8080
  selector:
    app: order-processing
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-notifications
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-notifications
  template:
    metadata:
      labels:
        app: order-notifications
    spec:
      containers:
        - name: order-notifications
          image: h4mdi/order-notifications:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "docker"
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
            - name: POSTGRES_USER
              value: "dbuser"
            - name: POSTGRES_PASSWORD
              value: "dbpass"  # Provide the correct password here
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: order-notifications
spec:
  type: ClusterIP
  ports:
    - name: "8085"
      port: 8085
      targetPort: 8080
  selector:
    app: order-notifications
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-period
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-period
  template:
    metadata:
      labels:
        app: order-period
    spec:
      containers:
        - name: order-period
          image: h4mdi/order-period:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "docker"
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
            - name: POSTGRES_USER
              value: "dbuser"
            - name: POSTGRES_PASSWORD
              value: "dbpass"  # Provide the correct password here
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: order-period
spec:
  type: ClusterIP
  ports:
    - name: "8086"
      port: 8086
      targetPort: 8080
  selector:
    app: order-period
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: basket
spec:
  replicas: 1
  selector:
    matchLabels:
      app: basket
  template:
    metadata:
      labels:
        app: basket
    spec:
      containers:
        - name: basket
          image: h4mdi/basket:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "docker"
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
            - name: POSTGRES_USER
              value: "dbuser"
            - name: POSTGRES_PASSWORD
              value: "dbpass"  # Provide the correct password here
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: basket
spec:
  type: ClusterIP
  ports:
    - name: "8081"
      port: 8081
      targetPort: 8080
  selector:
    app: basket
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: analytics
spec:
  replicas: 1
  selector:
    matchLabels:
      app: analytics
  template:
    metadata:
      labels:
        app: analytics
    spec:
      containers:
        - name: analytics
          image: h4mdi/analytics:latest
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "docker"
            - name: CONFIG_SERVICE_USER
              value: "cfguser"
            - name: CONFIG_SERVICE_PASSWORD
              value: "cfgpassword"
            - name: EUREKA_USER
              value: "user"
            - name: POSTGRES_USER
              value: "dbuser"
            - name: POSTGRES_PASSWORD
              value: "dbpass"  # Provide the correct password here
          ports:
            - containerPort: 8080
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: analytics
spec:
  type: ClusterIP
  ports:
    - name: "8082"
      port: 8082
      targetPort: 8080
  selector:
    app: analytics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eshop-myfront
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eshop-myfront
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: eshop-myfront
    spec:
      containers:
        - name: eshop-myfront
          image: h4mdi/eshop-myfront:latest
          ports:
            - containerPort: 4200
          resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: eshop-myfront
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 4200
  selector:
    app: eshop-myfront